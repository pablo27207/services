version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 10
    networks:
      - oogsj_network

  cache:
    image: redis:alpine
    container_name: redis_cache
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oogsj_network

  api_ingestor:
    build:
      context: ./api_ingestor
      dockerfile: Dockerfile
    container_name: api_ingestor
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./api_ingestor:/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - oogsj_network

  celery_worker:
    build:
      context: ./api_ingestor
      dockerfile: Dockerfile
    container_name: celery_worker
    depends_on:
      - db
      - cache
      - api_ingestor
    env_file:
      - .env
    environment:
      - CELERY_WORKER=true
      - CELERY_LOG_LEVEL=INFO
    volumes:
      - ./api_ingestor:/app
      - ./logs:/app/logs
    restart: always
    command: celery -A celery_tasks worker --loglevel=info
    networks:
      - oogsj_network

  celery_beat:
    build:
      context: ./api_ingestor
      dockerfile: Dockerfile
    container_name: celery_beat
    depends_on:
      - celery_worker
    env_file:
      - .env
    environment:
      - CELERY_WORKER=true
      - CELERY_LOG_LEVEL=INFO
    volumes:
      - ./api_ingestor:/app
      - ./logs:/app/logs
    restart: always
    command: celery -A celery_tasks beat --loglevel=info
    networks:
      - oogsj_network

  web_app:
    build: ./web_app
    container_name: web_app
    depends_on:
      - db
      - api_ingestor
    env_file:
      - .env
    restart: always
    volumes:
      - ./web_app:/app
    networks:
      - oogsj_network

  frontend_oogsj:
    build:
      context: ./oogsj-web
    container_name: frontend_oogsj
    restart: always
    depends_on:
      - web_app
    networks:
      - oogsj_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    depends_on:
      - web_app
      - api_ingestor
      - frontend_oogsj
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./oogsj-web/build:/usr/share/nginx/html:ro
      #- ./certbot/www:/var/www/certbot
      #- ./certbot/conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    restart: always
    networks:
      - oogsj_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew;'
    networks:
      - oogsj_network

volumes:
  db_data:

networks:
  oogsj_network:
    name: oogsj_network

